{"version":3,"sources":["arrow/index.js","sling/index.js","serviceWorker.js","index.js"],"names":["Image","imgIndex","slab1Position","x","y","slab2Position","Slab","engine","position","positionIndex","movement","changePosition","pos","diff","moveTo","setTimeout","moveSlab","Body","setPosition","body","window","innerHeight","this","myEngine","Bodies","rectangle","innerWidth","isStatic","World","add","world","slab","direction","requestAnimationFrame","move","translate","moveDown","Jump","props","myRender","myWorld","myPlayer","isJumping","slab1","slab2","createLevel","boxA","inertia","Infinity","render","sprite","texture","xScale","yScale","document","addEventListener","jumpme","checkDead","isDead","alert","createCompound","wallTop","wallBottom","wallLeft","wallRight","e","resetPlayer","setVelocity","set","checkDirection","velocity","isSlabColliding","setState","score","state","slabCollided","bounds","min","Matter","SAT","collides","max","intro","Engine","create","Render","element","ele","options","width","height","background","wireframes","run","top","left","right","textAlign","color","margin","padding","style","backgroundImage","backgroundSize","ref","border","Component","Height","Width","isSmall","ScoreOject","isSensor","posY","Math","floor","random","circle","label","fillStyle","toString","Sling","rockPosY","rockOptions","density","rock","polygon","elastic1","Constraint","pointA","bodyB","stiffness","type","strokeStyle","elastic2","mouse","Mouse","canvas","mouseConstraint","MouseConstraint","constraint","visible","_self","Events","on","button","i","pairs","bodyA","Boolean","location","hostname","match","ReactDOM","path","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.45588970.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Matter, {\n    Engine,\n    Render,\n    World,\n    Bodies,\n    Body\n} from \"matter-js\";\n\n// const Image = [\n//     \"https://assets.myntassets.com/assets/images/retaillabs/2020/4/20/5e2845e9-4852-4e71-b1eb-17bdf0bdc9641587378733744-stand.png\",\n//     \"https://assets.myntassets.com/assets/images/retaillabs/2020/4/20/882d0ad7-43b2-4ac0-a021-42b5884c35861587378732565-jump.png\"\n// ]\nconst Image = [\n    \"https://assets.myntassets.com/assets/images/retaillabs/2020/4/21/a670f7e5-7dbd-45b6-a3e7-7ed87d61aef21587488311633-stand1.png\",\n    \"https://assets.myntassets.com/assets/images/retaillabs/2020/4/21/595f5b66-c34a-4b33-842c-c76eea598e511587488312734-jump1.png\"\n]\n\nlet imgIndex = 0;\nconst slab1Position = { x: 0, y: 100 }\nconst slab2Position = { x: 0, y: 280 }\n\n\nclass Slab {\n    constructor(engine, position, positionIndex){\n        this.myEngine = engine;\n        this.body = Bodies.rectangle(window.innerWidth / 2, window.innerHeight - position.y, 120, 25, { isStatic: true });\n        World.add(this.myEngine.world, [this.body]);\n        this.position = positionIndex;\n    }\n\n    movement = true;\n\n    moveSlab(){\n        let slab = this.body;\n        let direction = 1;\n        let move = () => {\n            if (direction == 1) {\n                Body.translate(slab, { x: 3, y: 0 })\n                if (slab.position.x > window.innerWidth)\n                    direction = -1;\n            }\n            else {\n                Body.translate(slab, { x: -3, y: 0 })\n                if (slab.position.x < 0)\n                    direction = 1;\n            }\n            if (this.movement)\n                requestAnimationFrame(move)\n        }\n        requestAnimationFrame(move);\n    }\n\n    position = 0;\n\n    changePosition = () => {\n        this.position++;\n        let pos = (this.position)%3;\n        // console.log(pos);\n\n        if(pos == 0) {\n            // position bottom\n            this.movement = false;\n            let diff = slab2Position.y - slab1Position.y;\n            this.moveTo(diff)\n        }\n        else if(pos == 1) {\n            // position hide\n        this.movement = false;\n        let diff = slab1Position.y + 10;\n        this.moveTo(diff)\n\n        setTimeout(() => {\n            this.changePosition()\n        }, 1200);\n        }\n        else if(pos == 2) {\n            // position top\n            this.movement = true;\n            this.moveSlab()\n            Body.setPosition(this.body, {x: 0, y: 0})\n            let diff = window.innerHeight - slab2Position.y;\n            this.moveTo(diff)\n        }\n    }\n\n    moveTo (diff) {\n        let slab = this.body;\n        let moveDown = () => {\n            diff--;\n            Body.translate(slab, { x: 0, y: 1 })\n            if (diff > 0)\n                requestAnimationFrame(moveDown)\n            // else\n            //     this.bringFromTopSlab1()\n            // console.log(diff)\n        }\n        requestAnimationFrame(moveDown)\n    }\n}\n\nclass Jump extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            score: 0,\n            intro: true\n        }\n    }\n\n    myEngine = null;\n    myRender = null;\n    myWorld = null;\n    myPlayer = null;\n\n    isJumping = false;\n\n\n\n    slab = null;\n    slab1 = null;\n    slab2 = null;\n\n    componentDidMount() {\n\n        setTimeout(() => {\n            this.setState({intro: false})\n        }, 5000);\n\n        this.myEngine = Engine.create();\n\n        this.myRender = Render.create({\n            element: this.ele,\n            engine: this.myEngine,\n            options: {\n                width: window.innerWidth,\n                height: window.innerHeight,\n                background: 'transparent',\n                wireframes: false\n                // wireframes: true\n            }\n        });\n\n\n        Engine.run(this.myEngine);\n        Render.run(this.myRender);\n\n        this.createLevel()\n    }\n\n    createLevel = () => {\n        // this.createCompound()\n        let boxA = Bodies.rectangle(window.innerWidth / 2, window.innerHeight - slab1Position.y - 100, 50, 70, {\n            // isSensor: false, \n            inertia: Infinity,\n            // isStatic: false, frictionStatic: 0, restitution: 0,\n            render: {\n                sprite: {\n                    texture: Image[imgIndex],\n                    xScale: 0.16,\n                    yScale: 0.16\n                }\n            }\n        });\n\n        this.myPlayer = boxA;\n        World.add(this.myEngine.world, [boxA]);\n\n        document.addEventListener('keydown', this.jumpme);\n        document.addEventListener('click', this.jumpme);\n        \n        this.slab1 = new Slab(this.myEngine, slab1Position, 0);\n        \n        this.slab2 = new Slab(this.myEngine, slab2Position, 2);\n        this.slab2.moveSlab()\n        \n        this.slab = this.slab2;\n\n        let checkDead = () => {\n            if(this.isDead())\n            alert('dead')\n            else\n            requestAnimationFrame(checkDead)\n        }\n        requestAnimationFrame(checkDead)\n\n        // setTimeout(() => {\n        //     Body.setVelocity(boxA, { x: 9, y: 13 });\n        // }, 2000);\n    }\n\n    createCompound = () => {\n        let wallTop = Bodies.rectangle(window.innerWidth / 2, 0, window.innerWidth, 60, { isStatic: true });\n        let wallBottom = Bodies.rectangle(window.innerWidth / 2, window.innerHeight, window.innerWidth, 60, { isStatic: true });\n        let wallLeft = Bodies.rectangle(0, window.innerHeight/2, 60, window.innerHeight, { isStatic: true });\n        let wallRight = Bodies.rectangle(window.innerWidth, window.innerHeight/2, 60, window.innerHeight, { isStatic: true });\n\n        World.add(this.myEngine.world, [wallBottom, wallLeft, wallRight, wallTop]);\n    }\n\n    jumpme = (e) => {\n        // console.log(` ${e.code}`);\n        if (this.isJumping) return;\n        this.isJumping = true;\n        let boxA = this.myPlayer\n        let slab = this.slab.body\n        boxA.render.sprite.texture = Image[1];\n        setTimeout(() => {\n            resetPlayer()\n        }, 1000);\n        Body.setVelocity(boxA, { x: 0, y: -13 });\n\n        let resetPlayer = () => {\n            Body.set(boxA, 'isSensor', false)\n            boxA.render.sprite.texture = Image[0];\n            this.isJumping = false;\n        }\n\n        // Body.set(boxA, 'isSensor', true)\n        let checkDirection = () => {\n            if (boxA.velocity.y > 0) {\n                if (this.isSlabColliding()) {\n                    Body.set(boxA, 'isSensor', false)\n                    // Body.set(boxA, 'isStatic', true)\n                    // console.log('collided')\n                    this.setState({score : this.state.score+10})\n                    this.slabCollided()\n                    resetPlayer()\n                    // this.isJumping = false;\n\n                    let pos = {\n                        x: boxA.position.x,\n                        // y: this.slab.bounds.min.y - ((boxA.bounds.max.y - boxA.bounds.min.y)/2) - 15 \n                        y: slab.bounds.min.y - 75\n                    }\n                    // Body.setPosition(boxA, pos)\n\n                }\n            }\n            if (this.isJumping)\n                requestAnimationFrame(checkDirection);\n        }\n        requestAnimationFrame(checkDirection);\n\n\n        let dist = 1;\n        let up = true;\n        let _self = this;\n        // let move = () => {\n        //     if (up && dist < 40) {\n        //         Body.set(boxA, 'isStatic', true)\n        //         dist++;\n        //         Body.translate(boxA, { x: 0, y: -5 });\n        //         requestAnimationFrame(move);\n        //     } else {\n        //         //  Body.setVelocity(boxA, { x: 0, y: -1 });\n        //         // Body.set(boxA, 'isSensor', false)\n        //         Body.set(boxA, 'isStatic', true)\n        //         if (_self.isSlabColliding()) {\n        //             console.log('collided')\n        //             // Body.setStatic(boxA, true)\n        //             // Body.setStatic(_self.slab, true)\n\n        //             //     if(boxA.position.y < slab.position.y && boxA.bounds.min.x > slab.bounds.min.x && boxA.bounds.max.x < slab.bounds.max.x)\n        //             //         console.log('center')\n\n        //             this.slab1Move = !this.slab1Move; \n        //             this.slab2Move = !this.slab2Move; \n        //         } else {\n        //             up = false;\n        //             dist--;\n        //             Body.translate(boxA, { x: 0, y: 5 });\n        //             if (dist > 0)\n        //                 requestAnimationFrame(move);\n        //         }\n        //     }\n        //     // else if (dist > 0) {\n        //     //     dist--;\n        //     //     Body.translate(boxA, {x: 0, y: boxA.position.y+dist})\n        //     // }\n\n        //     // requestAnimationFrame(move)\n        // }\n        // requestAnimationFrame(move)\n\n    }\n\n\n    isSlabColliding = () => {\n        let boxA = this.myPlayer\n        let slab = this.slab.body\n\n        // console.log('is', boxA, slab)\n        let collision = Matter.SAT.collides(slab, boxA);\n\n        // console.log('coll', collision.collided,\n        //     boxA.position.y < slab.position.y && boxA.bounds.min.x > slab.bounds.min.x && boxA.bounds.max.x < slab.bounds.max.x\n        // );\n\n        // console.log(\n        //     (boxA.bounds.max.y-4) < slab.bounds.min.y\n        //     , boxA.position.y < slab.position.y\n        //     ,boxA.position.x >= slab.bounds.min.x \n        //     ,boxA.position.x <= slab.bounds.max.x\n        // )\n        return (\n            // collision.collided\n            // ||\n            (boxA.bounds.max.y-4) < slab.bounds.min.y\n            &&  boxA.position.y < slab.position.y\n            && boxA.position.x >= slab.bounds.min.x \n            && boxA.position.x <= slab.bounds.max.x\n        )\n    }\n\n    isDead = () => {\n        let boxA = this.myPlayer\n        let { x, y } = boxA.position \n        // console.log(\n        //     x < 0  //left\n        //     ,x > window.innerWidth //right\n        //     ,y > window.innerHeight //bottom\n        // )\n        return (\n            x < 0  //left\n            || x > window.innerWidth //right\n            || y > window.innerHeight //bottom\n            // && boxA.position.x <= slab.bounds.max.x\n        )\n    }\n\n    slabCollided = () => {\n        //collided\n        this.slab.movement = false;\n        setTimeout(() => {\n            this.slab1.changePosition()\n            this.slab2.changePosition()\n        }, 1000);\n\n        if(this.slab === this.slab1)\n            this.slab = this.slab2;\n        else\n            this.slab = this.slab1\n    }\n\n    render() {\n        if(this.state.score >= 50) {\n            alert('win')\n        }\n\n\n        const bg = {\n            backgroundImage: `url('https://assets.myntassets.com/assets/images/retaillabs/2020/4/21/0a883011-5808-44b5-9ef3-ab4395af3c881587491196565-Untitled.jpg')`,\n            backgroundSize: '100% 100%'\n        }\n        const score = {\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            right: 0,\n            textAlign : 'center',\n            background: 'black',\n            color: 'white',\n            width: '150px',\n            margin: 'auto',\n            padding: '5px'\n        }\n        return (\n\n            <div style={bg}>\n                <div style={score}>\n                    Score : {this.state.score}\n                </div>\n                {/* Arrow */}\n                <div ref={ref=>this.ele=ref}></div>\n\n                \n                {\n                this.state.intro &&\n                <div\n                style={{...score, top: '30%', width: '80%', padding: '20px', background: 'grey', border: '2px solid black', color: 'white'}}\n                >\n                    Jump 5 slabs to get 50 points to complete the game.\n                    <br></br>\n                    If you get to the spikes, you are dead and game over\n                </div>\n                }\n            </div>\n        );\n    }\n}\n\nexport default Jump;","import React, { Component } from 'react';\nimport Matter, {\n    Engine,\n    Render,\n    World,\n    Bodies,\n    Body,\n    Constraint,\n    Mouse,\n    MouseConstraint,\n    Events\n} from \"matter-js\";\n\n\nconst Height = window.innerHeight;\nconst Width = window.innerWidth;\nconst isSmall = Height < 660;\n\nclass ScoreOject {\n    constructor(myEngine, myRender) {\n        this.myEngine = myEngine;\n        this.myRender = myRender;\n\n        this.posY = \n        isSmall? \n        Math.floor((Math.random() * 100) + 20):\n        Math.floor((Math.random() * 200) + 100);\n\n        this.body = Bodies.circle(30, this.posY, 20, \n            { \n                isStatic: true, \n                label: 'score',\n                render: {\n                    fillStyle: \"#\"+((1<<24)*Math.random()|0).toString(16)\n                }\n            });\n        World.add(this.myEngine.world, [this.body]);\n        this.move();\n    }\n\n    move = () => {\n        let diff = Width;\n        let move = () => {\n            diff--;\n            Body.translate(this.body, { x: 2, y: 0 })\n            if (diff < 0) {\n                diff = Width;\n                if(!this.body.isStatic) Body.set(this.body, 'isStatic', true)\n                if(this.body.isSensor) Body.set(this.body, 'isSensor', false)\n                Body.setPosition(this.body, { x: 30, y: this.posY })\n            }\n            requestAnimationFrame(move)\n        }\n        requestAnimationFrame(move)\n    }\n}\nclass Sling extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            score: 0\n        }\n    }\n\n    myEngine = null;\n    myRender = null;\n    myWorld = null;\n\n\n    componentDidMount() {\n        this.myEngine = Engine.create();\n\n        this.myRender = Render.create({\n            element: this.ele,\n            engine: this.myEngine,\n            options: {\n                width: window.innerWidth,\n                height: window.innerHeight,\n                background: 'transparent',\n                wireframes: false\n                // wireframes: true\n            }\n        });\n\n\n        Engine.run(this.myEngine);\n        Render.run(this.myRender);\n\n        // add bodies\n        let \n            rockPosY = isSmall ? Height-200 : Height-200,\n            rockOptions = { density: 0.004, label: 'rock' },\n            rock = Bodies.polygon(200, rockPosY, 8, 20, rockOptions),\n            elastic1 = Constraint.create({\n                pointA: { x: 100, y: rockPosY },\n                bodyB: rock,\n                stiffness: 0.05,\n                render: { type: 'line', strokeStyle: '#304251' }\n            }),\n            elastic2 = Constraint.create({\n                pointA: { x: 300, y: rockPosY },\n                bodyB: rock,\n                stiffness: 0.05,\n                render: { type: 'line', strokeStyle: '#304251' }\n            });\n\n        World.add(this.myEngine.world, [rock, elastic1, elastic2]);\n\n\n        // add mouse control\n        var mouse = Mouse.create(this.myRender.canvas),\n            mouseConstraint = MouseConstraint.create(this.myEngine, {\n                mouse: mouse,\n                constraint: {\n                    stiffness: 0.2,\n                    render: {\n                        visible: false\n                    }\n                }\n            });\n\n        World.add(this.myEngine.world, mouseConstraint);\n\n        // keep the mouse in sync with rendering\n        this.myRender.mouse = mouse;\n\n        let _self = this;\n        Events.on(this.myEngine, 'afterUpdate', function () {\n            if (mouseConstraint.mouse.button === -1 && (rock.position.y < rockPosY)) {\n                rock = Bodies.polygon(200, rockPosY, 8, 20, rockOptions);\n                World.add(_self.myEngine.world, rock);\n                elastic1.bodyB = rock;\n                elastic2.bodyB = rock;\n            }\n        });\n\n\n        // fit the render viewport to the scene\n        // Render.lookAt(render, {\n        //     min: { x: 0, y: 0 },\n        //     max: { x: 800, y: 600 }\n        // });\n\n\n        for (let i = 0; i < 10; i++) {\n            setTimeout(() => {\n                new ScoreOject(this.myEngine, this.myRender);\n            }, i * 1000);\n        }\n\n        Events.on(this.myEngine, \"collisionStart\", (e)=>{\n            let pairs = e.pairs;\n            let {bodyA, bodyB} = pairs[0];\n            if(\n            bodyA.isSensor || bodyB.isSensor\n            ) return;\n            // console.log(e);\n            // console.log(\"Pair no visible: \", pairs)\n            // console.log(\"Pair visible: \", pairs[0]);\n            // console.log(\"colision between \" + pairs[0].bodyA.label + \" - \" + pairs[0].bodyB.label);       \n\n            Body.set(pairs[0].bodyA, \"isStatic\", false);\n            Body.set(pairs[0].bodyB, \"isStatic\", false);\n            Body.set(pairs[0].bodyA, \"isSensor\", true);\n            Body.set(pairs[0].bodyB, \"isSensor\", true);\n            Body.setVelocity(bodyA, { x: 0, y: 2 });\n            Body.setVelocity(bodyB, { x: 0, y: 2 });\n            \n            this.setState({score: this.state.score+10 })\n        })\n\n    }\n\n    render() {\n        const bg = {\n            backgroundImage: `url('https://cdn.dribbble.com/users/375867/screenshots/3200773/shady-forest-game-background.png')`,\n            backgroundSize: '100% 100%'\n        }\n        const score = {\n            position: 'fixed',\n            top: 0,\n            left: 0,\n            right: 0,\n            textAlign : 'center',\n            background: 'black',\n            color: 'white',\n            width: '150px',\n            margin: 'auto',\n            padding: '5px'\n        }\n        return (\n            <div style={bg}>\n                <div style={score}>\n                    Score : {this.state.score}\n                </div>\n                <div ref={ref=>this.ele=ref}></div>\n            </div>\n        );\n    }\n}\n\nexport default Sling;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport {\n    BrowserRouter,\n    Switch,\n    Route,\n    Link\n} from \"react-router-dom\";\n\n\nimport './index.css';\n// import App from './App';\n// import App from './intersectionApp';\n// import App from './lottie';\n// import App from './comiccon/App';\n// import App from './context';\n// import App from './video';\n// import App from './lazyimg';\n// import App from './summernote';\n// import App from './imagekit';\nimport Jump from './arrow';\nimport Sling from './sling';\n// import Slick from './slick';\n\n// import Survey from './Survey';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <BrowserRouter>\n        <Switch>\n            <Route path=\"/sling\">\n                <Sling />\n            </Route>\n            <Route path=\"/jump\">\n                <Jump />\n            </Route>\n            <Route path=\"/\">\n                /jump :  matter js jump\n                <br></br>\n                /sling :  matter js sling shooter\n            </Route>\n        </Switch>\n    </BrowserRouter>\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}